pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--a platformer
--by laerin
com={
 routines={},
 args={},
 add_cor=function(self,cor,arg)
  local cid=cocreate(cor)
  add(self.routines,cid)
  if (arg != nil) self.args[cid]=arg
  return cid
 end,
 del_cor=function(self,cid)
  del(self.routines,cid)
  if (self.args[cid]!=nil) self.args[cid]=nil
 end,
 update=function(self)
  for cor in all(self.routines) do
   local alive=false
   if (self.args[cor]==nil) then
    alive=coresume(cor)
   else
    alive,self.args[cor]=coresume(cor,self.args[cor])
   end

   if (not alive) del(self.routines,cor)
  end
 end
}

fade_mgr={
 val=0,
 tbl={
  {0,0,0,0,0,0,0,0},
  {1,1,1,1,0,0,0,0},
  {2,2,2,2,1,0,0,0},
  {3,3,3,3,1,0,0,0},
  {4,4,2,2,2,1,0,0},
  {5,5,5,1,1,1,0,0},
  {6,6,13,13,5,5,1,0},
  {7,6,6,13,13,5,1,0},
  {8,8,8,2,2,2,0,0},
  {9,9,4,4,4,5,0,0},
  {10,10,9,4,4,5,5,0},
  {11,11,3,3,3,3,0,0},
  {12,12,12,3,1,1,1,0},
  {13,13,5,5,1,1,1,0},
  {14,14,13,4,2,2,1,0},
  {15,15,13,13,5,5,1,0}
 },
 fade=function(self,idx)
  if (idx==nil or idx==0) then
   pal()
   self.val=0
  else
   self.val=idx
   for i=0,15 do
    pal(i,self.tbl[i+1][idx])
   end
  end
 end
}

function fpal(from,to)
 pal(from,fade_mgr.tbl[to+1][fade_mgr.val])
end

function fpal_all(c)
 for i=0,15 do
  fpal(i,c)
 end
end

scr_mgr={
 screens={},
 active='none',
 last='none',
 transitioning=false,
 add=function(self,name,scr)
  self.screens[name]=scr
 end,
 update=function(self)
  if (self.active != 'none') then
   if (self.active != self.last) self.screens[self.active]:init()

   self.screens[self.active]:update()
  end
  self.last=self.active
 end,
 draw=function(self)
  if (self.active != 'none') self.screens[self.active]:draw()
 end
}

function trans(scr,t,delay,func,inout)
 func = func or fade_inout
 if (not scr_mgr.transitioning) then
  scr_mgr.transitioning = true
  local arg={}
  arg.t=t
  arg.delay=delay
  arg.tmr=0
  arg.scr=scr
  arg.inout=inout or false

  com:add_cor(func,arg)
 end
end

function fade_inout(arg)
 while (arg.delay > 0) do
  arg.delay -= 1
  yield(arg)
 end

 while (arg.tmr < arg.t) do
  arg.tmr += 1
  local p = arg.tmr/arg.t

  if (not arg.inout) then
   fade_mgr:fade(flr(p*7))
  else
   if (p<0.5) then
    fade_mgr:fade(flr(14*p))
   else
    scr_mgr.active=arg.scr
    fade_mgr:fade(flr(14-14*p))
   end
  end

  yield(arg)
 end
 scr_mgr.active=arg.scr
end

game={}

function game:init()
 camera_shake = 0
 cam.x = 0
 cam.y = 0
 plyr:spawn(64,64)
end

function game:update()
 camera_effects()
 plyr:update()
end

function game:draw()
 cls()
 map(0,0,0,0,16,16)
 plyr:draw()
end

scr_mgr:add('game',game)

function sign(a)
 if (a > 0) then return 1 end
 if (a < 0) then return -1 end
 if (a == 0) then return 0 end
end

function dist(x1,y1,x2,y2)
 local x=abs(x1-x2)
 local y=abs(y1-y2)
 return sqrt(x*x+y*y)
end

cam={}
cam.x = 0
cam.y = 0
cam.draw_x = 0
cam.draw_y = 0

function camera_effects()
 screen_shake()
end

camera_shake=0
function screen_shake()
 local fade = 0.625
 local o_x=16-rnd(32)
 local o_y=16-rnd(32)

 o_x *= camera_shake
 o_y *= camera_shake

 cam.draw_x = cam.x + o_x
 cam.draw_y = cam.y + o_y

 camera_shake *= fade
 if (camera_shake <0.05) then
  camera_shake = 0
 end
end

debug=true

function _init()
 -- set initial screen here
 scr_mgr.active='game'
end

function _update()
 com:update()
 scr_mgr:update()
end

function _draw()
 scr_mgr:draw()
 if (debug) then
  print('cpu:'..stat(1),80,1,8)
  print('mem:'..stat(0),80,7,8)
  print('fps:'..stat(7),80,13,8)
 end
end

function kmove(obj,xdist,ydist,mx,my)
 mx=mx or 0
 my=my or 0
 local hit=nil
 local x = xdist
 local y = ydist
 if (obj.bbox != nil) then
  hit=col_map(obj.bbox,x,y,mx,my)
  if (hit.flags > 0x00) then
   x += hit.x
   y += hit.y
  end
 end

 obj.x+=x
 obj.y+=y

 if (obj.bbox != nil) then
  obj.bbox.x=obj.x
  obj.bbox.y=obj.y
 end
 return hit
end

-- tests only the corners of the bounding box
-- 0x02 is reserved for solid tiles
function col_map(bbox,dx,dy,mx,my)
 mx=mx or 0
 my=my or 0
 h=h or 8
 w=w or 8

 local cx=bbox:corners_x(dx)
 local cy=bbox:corners_y(dy)

 local x2=flr(cx[2]/8)
 local y2=flr(cy[2]/8)
 local x1=flr(cx[1]/8)
 local y1=flr(cy[1]/8)

 local z={}
 z[1]=fget(mget(x1+mx,y1+my))
 z[2]=fget(mget(x2+mx,y1+my))
 z[3]=fget(mget(x1+mx,y2+my))
 z[4]=fget(mget(x2+mx,y2+my))

 local hit={}
 hit.x=0
 hit.y=0
 hit.flags=0x00

 hit.x=cdist(z,0x02,x1,cx[1],x2,cx[2],1,3,2,4)

 for i=1,4 do
  hit.flags = bor(hit.flags,z[i])
 end

 return hit
end

function cdist(f,v,m1,o1,m2,o2,i1,i2,i3,i4)
 return ((m1+1)*8-o1)*(band(bor(f[i1],f[i2]),v)/v)+(m2*8-o2)*(band(bor(f[i3],f[i4]),v)/v)
end

aabb={
 new=function(x,y,w,h)
  local box={}
  box.x=x
  box.y=y
  box.w=w
  box.h=h
  box.hh=h/2
  box.hw=h/2
  function box:corners_x(dx)
   dx=dx or 0
   return {self.x-self.hw+dx, self.x+self.hw+dx}
  end
  function box:corners_y(dy)
   dy=dy or 0
   return {self.y-self.hh+dy, self.y+self.hh+dy}
  end
  return box
 end
}

function col_box(b1,b2)
 local hit={}
 hit.x=0
 hit.y=0
 hit.hit=false
 if (abs(b1.x-b2.x) < (b1.hw+b2.hw)) then
  if (abs(b1.y-b2.y) < (b1.hh+b2.hh)) then
   hit.hit=true
   local xd=sign(b1.x-b2.x)
   local yd=sign(b1.y-b2.y)
   hit.x=(b1.x-xd*b1.hw)-(b2.x+xd*b2.hw)
   hit.y=(b1.y-yd*b1.hh)-(b2.y+yd*b2.hh)
  end
 end

 return hit
end

plyr={
 x=0,
 y=0,
 hlth=3,
 grnd=false,
 wall=false,
 airtmr=0,
 airpress=false,
 vx=0,
 vy=0,
 bbox=aabb.new(0, 0, 8, 8)
}

function plyr:spawn(x,y)
 self.hlth=3
 self.x=x
 self.y=y
 self.grnd=false
 self.wall=0
 self.airtmr=0
 self.airpress=false
 self.vx=0
 self.vy=0
 self.bbox = aabb.new(self.x, self.y, 8, 8)
end

function plyr:draw()
 local c = 7
 if (self.bbox == nil) c = 13
 rectfill(self.x-4,self.y-4,self.x+4,self.y+4,c)

 if (debug) then
  rect(self.bbox.x-self.bbox.hw,self.bbox.y-self.bbox.hh, self.bbox.x+self.bbox.hw,self.bbox.y+self.bbox.hh,8)
 end
end

function plyr:update()
 local h=0
 local j=0

 if (btn(1)) h+=1
 if (btn(0)) h-=1

 local hit=kmove(self,h*6,0)
 if (not hit) then
  self.grnd=false
  self.wall=0
 else
  self.grnd=hit.y<0
  self.wall=sign(hit.x)
 end
end

function plyr:destroy()
end

__gfx__
00000000999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000911111190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700915555590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000915991590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000915991590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700915111590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000915555590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
